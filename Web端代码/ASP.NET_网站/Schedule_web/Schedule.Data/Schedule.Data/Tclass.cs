/*
insert license info here
*/
using System;
using System.Collections;
using System.Runtime.Serialization;

namespace Schedule.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[DataContract]
	public  class Tclass
	{

		#region Private Members
		private bool m_isChanged;

		private string m_classno; 
		private string m_classname; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Tclass()
		{
			m_classno = String.Empty; 
			m_classname = String.Empty; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		///
		[DataMember]
		public virtual string Classno
		{
			get { return m_classno; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Classno", value, "null");
				
				if(  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Classno", value, value.ToString());
				
				if(m_classno != value)
				{
					m_classno = value;
					m_isChanged = true;
					//OnPropertyChanged("Classno");
					
				}
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		///
		[DataMember]
		public virtual string ClassName
		{
			get { return m_classname; }

			set	
			{	
				if(  value != null &&  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for ClassName", value, value.ToString());
				
				if(m_classname != value)
				{
					m_classname = value;
					m_isChanged = true;
					//OnPropertyChanged("ClassName");
					
				}
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Tclass castObj = (Tclass)obj; 
			return ( castObj != null ) &&
				( this.m_classno == castObj.Classno );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * m_classno.GetHashCode();
			return hash; 
		}
		#endregion
			}
}

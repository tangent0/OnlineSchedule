/*
insert license info here
*/
using System;
using System.Collections;
using System.Runtime.Serialization;

namespace Schedule.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[DataContract]
	public  class Schedule
	{

		#region Private Members
		private bool m_isChanged;

		private int m_id; 
		private int m_week; 
		private int m_section; 
		private string m_course; 
		private string m_addr; 
		private string m_course_code; 
		private string m_teacher; 
		private string m_classno;
        private string m_teachingWeek;
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Schedule()
		{
			m_id = 0; 
			m_week = 0; 
			m_section = 0; 
			m_course = String.Empty; 
			m_addr = String.Empty; 
			m_course_code = String.Empty; 
			m_teacher = String.Empty; 
			m_classno = String.Empty; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		///
		[DataMember]
		public virtual int Id
		{
			get { return m_id; }
			set
			{
				if(m_id != value)
				{
					m_id = value;
					m_isChanged = true;
					//OnPropertyChanged("Id");
				}
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		///
		[DataMember]
		public virtual int Week
		{
			get { return m_week; }
			set
			{
				if(m_week != value)
				{
					m_week = value;
					m_isChanged = true;
					//OnPropertyChanged("Week");
				}
			}

		}

        public string WeekName
        {
            get
            {
                switch (m_week)
                {
                    case 1:
                        return "星期一";
                    case 2:
                        return "星期二";
                    case 3:
                        return "星期三";
                    case 4:
                        return "星期四";
                    case 5:
                        return "星期五";
                    case 6:
                        return "星期六";
                    case 7:
                        return "星期日";
                }
                return "";
            }
        }

			
		/// <summary>
		/// 
		/// </summary>
		///
		[DataMember]
		public virtual int Section
		{
			get { return m_section; }
			set
			{
				if(m_section != value)
				{
					m_section = value;
					m_isChanged = true;
					//OnPropertyChanged("Section");
				}
			}

		}
        public string SectionName
        {
            get
            {
                switch (m_section)
                {
                    case 1:
                        return "第一、二节";
                    case 2:
                        return "第三、四节";
                    case 3:
                        return "第四、五节";
                    case 4:
                        return "第五、六节";
                    case 5:
                        return "第六、七节";

                }
                return "";

            }
        }
			
		/// <summary>
		/// 
		/// </summary>
		///
		[DataMember]
		public virtual string Course
		{
			get { return m_course; }

			set	
			{	
				if(  value != null &&  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Course", value, value.ToString());
				
				if(m_course != value)
				{
					m_course = value;
					m_isChanged = true;
					//OnPropertyChanged("Course");
					
				}
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		///
		[DataMember]
		public virtual string Addr
		{
			get { return m_addr; }

			set	
			{	
				if(  value != null &&  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Addr", value, value.ToString());
				
				if(m_addr != value)
				{
					m_addr = value;
					m_isChanged = true;
					//OnPropertyChanged("Addr");
					
				}
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		///
		[DataMember]
		public virtual string CourseCode
		{
			get { return m_course_code; }

			set	
			{	
				if(  value != null &&  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for CourseCode", value, value.ToString());
				
				if(m_course_code != value)
				{
					m_course_code = value;
					m_isChanged = true;
					//OnPropertyChanged("CourseCode");
					
				}
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		///
		[DataMember]
		public virtual string Teacher
		{
			get { return m_teacher; }

			set	
			{	
				if(  value != null &&  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Teacher", value, value.ToString());
				
				if(m_teacher != value)
				{
					m_teacher = value;
					m_isChanged = true;
					//OnPropertyChanged("Teacher");
					
				}
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		///
		[DataMember]
		public virtual string ClassNo
		{
			get { return m_classno; }

			set	
			{	
				if(  value != null &&  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for ClassNo", value, value.ToString());
				
				if(m_classno != value)
				{
					m_classno = value;
					m_isChanged = true;
					//OnPropertyChanged("ClassNo");
					
				}
			}
		}
        [DataMember]
        public virtual string TeachingWeek
        {
            get
            {
                return m_teachingWeek;
            }
            set
            {
                m_teachingWeek = value;
            }
        }
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Schedule castObj = (Schedule)obj; 
			return ( castObj != null ) &&
				( this.m_id == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * m_id.GetHashCode();
			return hash; 
		}
		#endregion
			}
}
